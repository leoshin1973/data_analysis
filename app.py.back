import streamlit as st
import pandas as pd
from langchain_experimental.agents import create_pandas_dataframe_agent
from langchain.chat_models import ChatOpenAI
from langchain.agents.agent_types import AgentType
import os 
from pygwalker.api.streamlit import StreamlitRenderer 

st.set_page_config(
    page_title="Use Pygwalker In Streamlit",
    layout="wide"
)

# CSS 스타일 정의
# st.markdown(
#     """
#     <style>
#     .main {
#         width: 100%;
#         height: 100%;
#     }
#     </style>
#     """,
#     unsafe_allow_html=True
# )

# 사이드바에서 사용자로부터 OpenAI API 키 입력받기
api_key = st.sidebar.text_input("Enter your OpenAI API key", type="password")

# OpenAI API 키 설정
if api_key:
    os.environ['OPENAI_API_KEY'] = api_key
else:
    st.warning("OpenAI API Key을 입력하세요")

st.markdown("[Visit OpenAI](https://www.openai.com)")

# 파일 업로드, 분석
upload_file = st.file_uploader("파일 선택", type=["csv", "xlsx"])

# 업로드된 파일 처리
if upload_file is not None:
    if upload_file.name.endswith('.csv'):
        df = pd.read_csv(upload_file)
    elif upload_file.name.endswith('.xlsx'):
        df = pd.read_excel(upload_file, engine='openpyxl')
    else:
        st.error("지원되지 않는 파일 형식입니다. CSV 또는 Excel 파일을 업로드하세요.")
        st.stop()

    # edited_df = st.data_editor(df)
    st.write(df)

    pyg_app = StreamlitRenderer(df)

    pyg_app.explorer()

    # Chat 모델 설정
    model_name = 'gpt-4-0613'
    model = ChatOpenAI(temperature=0, model=model_name)

    # Chat 모델에 데이터프레임 연결
    agent = create_pandas_dataframe_agent(
        model,
        df,
        verbose=True,
        agent_type=AgentType.OPENAI_FUNCTIONS,
        allow_dangerous_code=True,
    )

    # 질문 실행
    query = '파일은 몇개의 컬럼으로 이루어져 있고 총 몇개 레코드로 구성되어 있는지 알려줘. 각각의 컬럼명을 별도로 알려줘'
    chat_query = agent.run(query)
    st.write(chat_query)


question = st.text_input("질문을 입력하세요. 예시: 첫번재 컬럼에서 이상치 데이터가 있는지 확인해줘")

if question is not None: 
    chat_query = agent.run(question)
    st.write(chat_query)

